#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('runWeatherForecast:server');
var http = require('http');
var request = require('request');
var ip = null;
var zk = require('node-zookeeper-client');
var UUID = require('node-uuid');
var moment  = require('moment');
//var ZooKeeper = require ("zookeeper");
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  request('http://checkip.amazonaws.com/', function (error, response, body) {
    if(error){
      return console.log('Error:', error);
    }

    if(response.statusCode !== 200){
      return console.log('Invalid Status Code Returned:', response.statusCode);
    }
    ip = body;
    ip = ip.replace(/\n$/, '');
    //ip = "127.0.0.1";
    console.log("Host IP is: " + ip);
    console.log(ip+":2181");

    var client = zk.createClient(ip+':2181');

    console.log("Client Created");

    var path = 'http://'+ip+":8200/runWeatherForecast";
    var sID = UUID.v4();
    var data = {"name": "runWeatherForecast",
      "id": sID,
      "address": ip,
      "port": 8200,
      "sslPort": null,
      "payload": null,
      "registrationTimeUTC": moment().utc().valueOf(),
      "serviceType": "DYNAMIC",
      "uriSpec": {"parts": [{"value": path,
        "variable": false}]}};

    console.log(JSON.stringify(data));

    client.once('connected', function () {
      console.log('Connected to the server.');

      client.create('/services/runWeatherForecast/'+sID,JSON.stringify(data), 1, function (error) {
        if(error){
          console.log('Failed to create node: %s due to: %s',path, error);
        }
        else{
          console.log('Node: %s is successfully created. Cheers!!', path)
        }
//        client.close();
      });
    });
    client.connect();
  });
}